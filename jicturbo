#!/bin/bash
# JICTurbo CRM - Docker Stack Deployment Script
# Este script facilita o deploy do JICTurbo usando Docker Swarm

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Função para exibir mensagens
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se está no diretório correto
if [ ! -f "docker-compose-template.yml" ]; then
    log_error "Arquivo docker-compose-template.yml não encontrado!"
    log_error "Execute este script no diretório raiz do projeto JICTurbo"
    exit 1
fi

# Verificar se .env existe
if [ ! -f ".env" ]; then
    log_warn "Arquivo .env não encontrado!"
    log_info "Criando .env a partir do .env.example..."
    cp .env.example .env
    log_warn "Por favor, edite o arquivo .env com suas credenciais e execute novamente"
    log_info "nano .env"
    exit 1
fi

# Carregar variáveis de ambiente
log_info "Carregando variáveis de ambiente..."
export $(cat .env | grep -v '^#' | xargs)

# Verificar se a rede network_public existe
if ! docker network ls | grep -q "network_public"; then
    log_warn "Rede network_public não existe. Criando..."
    docker network create --driver overlay network_public
    log_info "Rede network_public criada!"
fi

# Criar docker-compose.yml a partir do template
log_info "Gerando docker-compose.yml a partir do template..."
envsubst < docker-compose-template.yml > docker-compose.yml

# Verificar se Docker Swarm está inicializado
if ! docker info | grep -q "Swarm: active"; then
    log_error "Docker Swarm não está inicializado!"
    log_info "Execute: docker swarm init"
    exit 1
fi

# Perguntar qual ação executar
echo ""
echo "==================================="
echo "  JICTurbo CRM - Stack Manager"
echo "==================================="
echo "1) Deploy/Atualizar stack"
echo "2) Ver status dos serviços"
echo "3) Ver logs do backend"
echo "4) Ver logs do frontend"
echo "5) Aplicar migrações do banco"
echo "6) Executar seed do banco"
echo "7) Remover stack"
echo "8) Sair"
echo "==================================="
read -p "Escolha uma opção: " option

case $option in
    1)
        log_info "Fazendo deploy da stack jicturbo..."
        docker stack deploy -c docker-compose.yml jicturbo
        log_info "Stack deployada com sucesso!"
        log_info "Aguarde alguns instantes para os serviços iniciarem..."
        sleep 5
        docker stack services jicturbo
        ;;
    2)
        log_info "Status dos serviços:"
        docker stack services jicturbo
        echo ""
        log_info "Detalhes das tasks:"
        docker stack ps jicturbo
        ;;
    3)
        log_info "Logs do backend (Ctrl+C para sair):"
        docker service logs jicturbo_backend -f
        ;;
    4)
        log_info "Logs do frontend (Ctrl+C para sair):"
        docker service logs jicturbo_frontend -f
        ;;
    5)
        log_info "Aplicando migrações do banco..."
        BACKEND_CONTAINER=$(docker ps -q -f name=jicturbo_backend | head -n 1)
        if [ -z "$BACKEND_CONTAINER" ]; then
            log_error "Container backend não encontrado!"
            exit 1
        fi
        docker exec $BACKEND_CONTAINER npx prisma migrate deploy
        log_info "Migrações aplicadas com sucesso!"
        ;;
    6)
        log_info "Executando seed do banco..."
        BACKEND_CONTAINER=$(docker ps -q -f name=jicturbo_backend | head -n 1)
        if [ -z "$BACKEND_CONTAINER" ]; then
            log_error "Container backend não encontrado!"
            exit 1
        fi
        docker exec $BACKEND_CONTAINER npm run seed
        log_info "Seed executado com sucesso!"
        ;;
    7)
        log_warn "Tem certeza que deseja remover a stack jicturbo? (y/n)"
        read -p "> " confirm
        if [ "$confirm" = "y" ]; then
            log_info "Removendo stack..."
            docker stack rm jicturbo
            log_info "Stack removida!"
        else
            log_info "Operação cancelada"
        fi
        ;;
    8)
        log_info "Saindo..."
        exit 0
        ;;
    *)
        log_error "Opção inválida!"
        exit 1
        ;;
esac

echo ""
log_info "Operação concluída!"
